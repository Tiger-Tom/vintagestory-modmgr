name: Package
on: workflow_dispatch

env:
    PYTHON_OPTIMIZE: 2

jobs:
    build-zipapp:
        name: Create ZipApp
        runs-on: ubuntu-latest
        steps:
          - uses: actions/checkout@v3
          - uses: actions/setup-python@v4
            with:
                python-version: '3.11'
                cache: pip
          - name: Install requirements
            run: pip install -r requirements.txt
          - name: Create Runner File __main__.py
            uses: DamianReeves/write-file-action@v1.2
            with:
                path: __main__.py
                contents: import main;main.main()
          - name: Add Files to Zips
            run: zip -r -0 vintagestory-modmgr.pyz.zip __main__.py main.py gui/ lib/ LICENCE
          - name: Convert Zip to PYZs
            run: python3 -m zipapp -p /usr/bin/python3 vintagestory-modmgr.pyz.zip -o vintagestory-modmgr.pyz
          - name: Test Application
            run: python3 vintagestory-modmgr.pyz --help
          - name: Upload Build Artifact
            uses: actions/upload-artifact@v3
            with:
                name: Cross-Platform ZipApp (requires Python to be installed)
                path: vintagestory-modmgr.pyz
    build-executable:
        env:
            bundle_common: 'main.py --onefile --log-level ERROR'
            bundle_sans: '--hidden-import webview --console'
            bundle_avec: '--windowed'
        strategy:
            fail-fast: false
            matrix:
                os:
                  #- {name: 'ubuntu-latest',  title: 'Linux',   exec: 'vintagestory-modmgr{0}',     id: 'l',
                  #      sans_gui: '--strip',
                  #      avec_gui: '--strip --add-data gui/:gui --add-binary /usr/lib/libjavascriptcoregtk-4.0.so:. --splash ./icons/vintagestory-modmgr_splash.png',
                  #      webview: 'pywebview[gtk]'}
                  - {name: 'windows-latest', title: 'Windows', exec: 'vintagestory-modmgr{0}.exe', id: 'w',
                        sans_gui: '',
                        avec_gui: '--add-data gui/`;gui --splash ./icons/vintagestory-modmgr_splash.png --icon ./icons/vintagestory-modmgr_icon.ico',
                        webview: 'pywebview'}
                  - {name: 'macos-latest',   title: 'MacOS',   exec: 'vintagestory-modmgr{0}',     id: 'm',
                        sans_gui: '--strip',
                        avec_gui: '--strip --add-data gui/:gui --icon ./icons/vintagestory-modmgr_icon.icns',
                        webview: 'pywebview'}
        name: Build Executable For ${{ matrix.os.title }}
        runs-on: ${{ matrix.os.name }}
        steps:
          - uses: actions/checkout@v3
          - uses: actions/setup-python@v4
            with:
                python-version: '3.11'
            # Install required libraries
          - name: Install UPX
            if: matrix.os.id == 'w'
            uses: crazy-max/ghaction-upx@v2
            with:
                install-only: true
          - name: Install PyInstaller
            run: pip install -U pyinstaller pyinstaller-hooks-contrib
          - name: Install Requirements
            run: pip install -r requirements.txt -r optional-requirements.txt
            # Build Sans GUI
          - name: Bundle With PyInstaller (Sans GUI) For ${{ matrix.os.title }}
            run: pyinstaller ${{ env.bundle_common }} ${{ env.bundle_sans }} ${{ matrix.os.sans_gui }} --name ${{ format(matrix.os.exec, '') }}
            # Install GUI library
            ## Needed packages (Linux only)
          #- name: Update package databases (Linux only)
          #  if: ${{ matrix.os.id == 'l' }}
          #  run: sudo apt-get update
          #- name: Install Tk (needed for PyInstaller splash) (Linux only)
          #  if: ${{ matrix.os.id == 'l' }}
          #  run: sudo apt-get install -y tk
          #- name: Install PyWebView GTK Requirements (Linux only)
          #  if: ${{ matrix.os.id == 'l' }}
          #  run: sudo apt-get install -y gir1.2-webkit2-4.0 libgirepository1.0-dev libwebkit2gtk-4.0 libcairo2-dev libgtk-3-dev libwebkit2gtk-4.0-37
            ## Install PIP package
          - name: Install PyWebView (GUI)
            run: pip install ${{ matrix.os.webview }}
            # Build Avec GUI
          - name: Bundle With PyInstaller (Avec GUI) For ${{ matrix.os.title }}
            run: pyinstaller ${{ env.bundle_common }} ${{ env.bundle_avec }} ${{ matrix.os.avec_gui }} --name ${{ format(matrix.os.exec, '-gui') }}
            # Debug Info
          - name: Debug + Tree
            run: python3 ./main.py debug --tree .
            # Upload artifacts
            ## Sans GUI
          - name: Upload ${{ matrix.os.title }} Executable Artifact (Sans GUI)
            uses: actions/upload-artifact@v3
            with:
                name: ${{ matrix.os.title }} Binary (Sans GUI)
                path: dist/${{ format(matrix.os.exec, '') }}
            ## Avec GUI
          - name: Upload ${{ matrix.os.title }} Executable Artifact (Avec GUI)
            uses: actions/upload-artifact@v3
            with:
                name: ${{ matrix.os.title }} Binary (Avec GUI)
                path: dist/${{ format(matrix.os.exec, '-gui') }}
            ### MacOS App
          #- name: Zip MacOS App to Preserve Name
          #  if: matrix.os.id == 'm'
          #  run: zip ${{ format(matrix.os.exec, '-gui.app.zip') }} dist/${{ format(matrix.os.exec, '-gui.app') #}}
          #- name: Upload MacOS App Artifact (Avec GUI)
          #  if: matrix.os.id == 'm'
          #  uses: actions/upload-artifact@v3
          #  with:
          #      name: MacOS App (Avec GUI)
          #      path: ${{ format(matrix.os.exec, '-gui.app.zip') }}