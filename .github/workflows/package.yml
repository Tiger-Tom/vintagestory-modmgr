name: Package
on: workflow_dispatch
jobs:
    build-zipapp:
        strategy:
            fail-fast: false
            matrix:
                gui:
                  - {info_suffix: 'With GUI', add_dir: 'gui/', executable: 'vintagestory-modmgr-gui.pyz'}
                  - {info_suffix: 'Without GUI', add_dir: '', executable: 'vintagestory-modmgr.pyz'}
        runs-on: ubuntu-latest
        steps:
          - uses: actions/checkout@v3
          - uses: actions/setup-python@v4
            with:
                python-version: '3.11'
                cache: 'pip'
          - name: Install requirements
            run: 'pip install -r requirements.txt'
          - name: Create Runner File __main__.py
            uses: DamianReeves/write-file-action@v1.2
            with:
                path: __main__.py
                contents: 'import main;main.main()'
          - name: 'Add Files to Zips ${{ matrix.gui.info_suffix }}'
            run: 'zip -r -0 ${{ matrix.gui.executable }}.zip __main__.py main.py basemod.py modes/ ${{ matrix.gui.add_dir }}'
          - name: Convert Zips to PYZs
            run: 'python3 -m zipapp -p /usr/bin/python3 ${{ matrix.gui.executable }}.zip -o ${{ matrix.gui.executable }}'
          - name: 'Test Application ${{ matrix.gui.info_suffix }}'
            run: 'python3 ${{ matrix.gui.executable }} --help'
          - name: 'Upload Build Artifact ${{ matrix.gui.info_suffix }}'
            uses: actions/upload-artifact@v3
            with:
                name: 'ZipApp (cross-platform) ${{ matrix.gui.info_suffix }}'
                path: matrix.gui.executable
    build-executable:
        strategy:
            fail-fast: false
            matrix:
                os: [ {name: 'ubuntu-latest', title: 'Linux', executable: 'vintagestory-modmgr{1}'}, {name: 'windows-latest', title: 'Windows', executable: 'vintagestory-modmgr{1}.exe'}, ]
                gui: [ {enabled: true, exesuffix: '-gui', info_suffix: 'With GUI', add_dirs_lin: '--add-data "gui/*:gui"', add_dirs_win: '"--add-data "gui/*;gui"'}, {enabled: false, exesuffix: '', info_suffix: 'Without GUI', add_dirs_lin: '', add_dirs_win: ''} ]
        runs-on: ${{ matrix.os.name }}
        steps:
          - uses: actions/checkout@v3
          - uses: actions/setup-python@v4
            with:
                python-version: '3.11'
          - name: Install PyInstaller
            run: 'pip install -U pyinstaller'
          - name: Install Requirements
            run: 'pip install -r requirements.txt'
          - if: matrix.gui.enabled
            name: Install PyWebView for GUI
            run: 'pip install -U pywebview'
          - if: matrix.os.name == 'ubuntu-latest'
            name: Set Python Optimize (Linux only)
            run: 'echo "PYTHONOPTIMIZE=2" >> $GITHUB_ENV'
          - name: 'Build application with PyInstaller ${{ matrix.gui.info_suffix }}'
            run: |
                pyinstaller -yF ${{ (matrix.os.name == 'ubuntu-latest') && matrix.gui.add_dirs_lin || matrix.gui.add_dirs_win }} -n ${{ format(matrix.os.executable, matrix.gui.exesuffix) }} main.py
          - name: Test application
            run: |
                dist/${{ format(matrix.os.executable, matrix.gui.exesuffix) }} --help
          - name: Upload Build Artifact
            uses: actions/upload-artifact@v3
            with:
                name: 'Bundled Executable (${{ matrix.os.title }}) ${{ matrix.gui.info_suffix }}'
                path: 'dist/${{ format(matrix.os.executable, matrix.gui.exesuffix) }}'
